Transfer learning
=================

Bioacoustics researchers often tend to employ transfer learning approaches, using models that were pre-trained on other data (e.g., images). Such approaches are sometimes useful when training datasets are small. Using transfer learning in a Koogu workflow simply involves 'plugging in' a pre-trained model in an implementation of the abstract class :class:`koogu.model.architectures.BaseArchitecture`.

The below example implements :class:`~koogu.model.architectures.BaseArchitecture`, by defining :meth:`~koogu.model.architectures.BaseArchitecture.build_network` to incorporate a publicly available pre-trained **MobileNetV2** whose weights were trained using the large ImageNet dataset. You may choose to use a different pre-trained model from `here <https://www.tensorflow.org/api_docs/python/tf/keras/applications>`_ or from other sources.  Often, these pre-trained models have specific expectations with respect to input shapes, types, etc.

Assuming a data pipeline similar to the example in :doc:`../quickstart` (which uses :class:`~koogu.data.feeder.SpectralDataFeeder`), the 1-channel spectrograms generated by the feeder must be converted to a 3-channel RGB image using a suitable colorscale (and resized) before they become inputs to the pre-trained model. We use :class:`~koogu.data.tf_transformations.Spec2Img` for this purpose. The pre-trained model will be used as a "feature extractor", and a classification layer will be added. The "training" of the full model will only update weights of the added classification layer.

.. literalinclude:: ../code_samples/transfer_learning.py
   :end-before: [end-implementation]

With an architecture defined this way, you can simply replace the following code block in step 2 of the :doc:`../quickstart`

.. literalinclude:: ../code_samples/full_workflow_example.py
   :start-after: [model_setup--start]
   :end-before: [model_setup--end]
   :linenos:
   :lineno-match:

... with this -

.. literalinclude:: ../code_samples/transfer_learning.py
   :start-after: [start-create-model]
   :end-before: [end-create-model]

That's it! The remainder of the Koogu workflow described in the :doc:`../quickstart` will now employ transfer learning.