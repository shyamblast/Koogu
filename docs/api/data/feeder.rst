Data feeder
===========

For most common applications in bioacoustics, :class:`~koogu.data.feeder.SpectralDataFeeder`
offers a convenient way to convert prepared audio clips into spectrograms on-the-fly
during training/validation. :class:`~koogu.data.feeder.DataFeeder` does not apply
any transformations and feeds audio clips as-is. By default, both classes do not
apply any augmentations.

For processing prepared data generated by mechanisms outside of Koogu, extend
:class:`koogu.data.feeder.BaseFeeder` to implement custom logic to feed your
data into the Koogu training pipeline. See :doc:`../../advanced/custom_feeders`
for guidance.

Like :class:`koogu.data.feeder.BaseFeeder`, both :class:`~koogu.data.feeder.DataFeeder`
and :class:`~koogu.data.feeder.SpectralDataFeeder` are extensible, and
facilitate implementation of custom transformations and/or augmentations.

To apply canned augmentations (either :doc:`those offered in Koogu <augmentation>`
or any user-defined augmentations implemented by subclassing
:class:`koogu.data.augmentations.Temporal` or
:class:`koogu.data.augmentations.SpectroTemporal`) in a chained manner, use
methods :meth:`~koogu.data.feeder.DataFeeder.add_pre_transform_augmentation`
and :meth:`~koogu.data.feeder.DataFeeder.add_post_transform_augmentation` on
instances of :class:`~koogu.data.feeder.DataFeeder` and
:class:`~koogu.data.feeder.SpectralDataFeeder`. You may invoke these methods
repeatedly to build your desired chaining of canned augmentations.
For finer control with applying augmentations (i.e., implementing conditional
branching and other logic), create a subclass and override the methods
:meth:`~koogu.data.feeder.DataFeeder.pre_transform` and
:meth:`~koogu.data.feeder.DataFeeder.post_transform` as needed.


.. autoclass:: koogu.data.feeder.SpectralDataFeeder
   :show-inheritance:

.. autoclass:: koogu.data.feeder.DataFeeder
   :show-inheritance:
   :members:

